{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d3900684-5225-413f-9ed3-ec52c4c7c1c0",
   "metadata": {},
   "source": [
    "# 005856021 (UID) - Assignment Week 4 - Rick Kessels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db7c7886-89ce-49de-b990-c97131196a02",
   "metadata": {},
   "source": [
    "Self-assessment: The homework went pretty well! I think I understand all material and exercises. I was not sure whether to make left-aligned or right-aligned columns in 6.9c, because we've mainly encounted right-aligned columns so far. Is this a convention?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a54ac0e9-9f5e-4469-82a4-d7c0ddf0e74f",
   "metadata": {},
   "source": [
    "# 6.3 What does this code do?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf62b822-ef83-428c-bcc7-032c6101bf3a",
   "metadata": {},
   "source": [
    "The following code needs to be explained:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad2b11ef-a24f-4b65-849c-c9ee3a834b42",
   "metadata": {},
   "source": [
    "```python\n",
    "temperatures = {\n",
    "    'Monday': [66, 70, 74],\n",
    "    'Tuesday': [50, 56, 64], \n",
    "    'Wednesday': [75, 80, 83],\n",
    "    'Thursday': [67, 74, 81]\n",
    "}\n",
    "for k, v in temperatures.items():\n",
    "    print(f'{k}: {sum(v)/len(v):.2f}')\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cae41860-a609-4189-90ba-cdbbb9dabafb",
   "metadata": {},
   "source": [
    "We can see that, first, a dictionary `temperatures` is defined. The dictionary `temparatures` maps days of the week that are of the `string` type (`'Monday'`, `'Tuesday'`, `'Wednesday'` and `'Thursday'`) to a list of integers representing the temperatures on these days over a period of time. This means that e.g. on three different `'Monday'`'s, it was `66` degrees, `70` degrees and `74` degrees, respectively."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "290f7e05-8dcc-43a7-ac49-a878d6399b51",
   "metadata": {},
   "source": [
    "Then, the `for` loop iterates over the keys `k` and the values `v` in the dictionary `temperatures` by using the `items` method, which returns each key-value pair as a tuple that we subsequently unpack into `k` and `v`. We print the key `k` and calculate the average of the temperatures on a certain day by using the built-in functions `sum(v)` and `len(v)`. Finally, the resulting day-average is rounded to two decimals due to the formatting `.2f`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e8ea18ab-4b3a-44fc-a214-ecec1b7db9df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Monday: 70.00\n",
      "Tuesday: 56.67\n",
      "Wednesday: 79.33\n",
      "Thursday: 74.00\n"
     ]
    }
   ],
   "source": [
    "temperatures = {\n",
    "    'Monday': [66, 70, 74],\n",
    "    'Tuesday': [50, 56, 64], \n",
    "    'Wednesday': [75, 80, 83],\n",
    "    'Thursday': [67, 74, 81]\n",
    "}\n",
    "for k, v in temperatures.items():\n",
    "    print(f'{k}: {sum(v)/len(v):.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c46c80f4-41f1-41cc-aaa0-b1bd49eb369e",
   "metadata": {},
   "source": [
    "# 6.6 Duplicate word removal"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68661599-4ca8-4ecd-b93f-3678f232401e",
   "metadata": {},
   "source": [
    "We need to write a function that receives a list of words, then determines and displays in alphabetical order only the unique words. Upper and lowercase letters should be treated the same, and we are instructed to use a set to obtain the unique words in the list."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50175ece-d98e-4afb-9dad-5c61faf44d30",
   "metadata": {},
   "source": [
    "Let us first define the function `order_unique` as follows, which takes the list of words `input_list` as an input. It will then go on to first rewrite all words to only lowercase letters. Then, it will convert `input_list_lowercase`, in which the lowercase words are stored, into a `set`, and will finally sort this `set` by means of the function `sorted`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "281e53fd-6727-4642-bc9f-b015307953a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def order_unique(input_list):\n",
    "    \"\"\"Remove duplicate words and display in alphabetical order.\"\"\"\n",
    "    input_list_lowercase = [word.lower() for word in input_list]\n",
    "    return sorted(set(input_list_lowercase))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bf5eb9b-6108-4af7-8c60-61dcf26c22e6",
   "metadata": {},
   "source": [
    "Let us try out this function! We ask the user for an input sentence, and split their sentence into separate words by means of the `split()` function. We store the individual words into the list `input_list`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "828f036f-8a13-44b5-a125-8d464520a769",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please write a sentence:  Hi my name is Rick\n"
     ]
    }
   ],
   "source": [
    "input_sentence = input(\"Please write a sentence: \")\n",
    "input_list = input_sentence.split()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25b8a27f-9aeb-4d67-9fcf-3806ec68e471",
   "metadata": {},
   "source": [
    "Then, we call the function `order_unique`, which takes a list of words as an input. The `resulting_list` will contain the resulting list of words where duplicates are removed, all words are lower case and all words are sorted alphabetically. We will then print each `word` in `resulting_list` with a space to separate the words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fb7e1b1a-8c86-441d-aa48-185029c0525e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hi is my name rick "
     ]
    }
   ],
   "source": [
    "resulting_list = order_unique(input_list)\n",
    "for word in resulting_list:\n",
    "    print(word, end=' ')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d9ff0b2-95d0-4a2c-943e-0db45def1dc9",
   "metadata": {},
   "source": [
    "It works! Let's try it out on arguably the most famous Shakespearian quote."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bf6e29c5-5c03-4e1a-b81e-83f67ca67b47",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please write a sentence:  to be or not to be that is the question\n"
     ]
    }
   ],
   "source": [
    "input_sentence = input(\"Please write a sentence: \")\n",
    "input_list = input_sentence.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "73c41a96-552b-42af-9c06-b3666bc8eb4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "be is not or question that the to "
     ]
    }
   ],
   "source": [
    "resulting_list = order_unique(input_list)\n",
    "for word in resulting_list:\n",
    "    print(word, end=' ')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19165d5c-f702-4c72-825f-e34fb5e17faa",
   "metadata": {},
   "source": [
    "It also works!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "436d6af9-be20-43ee-b5bf-351107b628ed",
   "metadata": {},
   "source": [
    "# 6.9 Dictionary manipulations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e100fe12-f1c3-4a8b-88d1-6ee101727672",
   "metadata": {},
   "source": [
    "The following dictionary is given in the exercise:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9957686d-a83a-4906-b852-a04f3b3a8e99",
   "metadata": {},
   "outputs": [],
   "source": [
    "tlds = {'Canada': 'ca', 'United States': 'us', 'Mexico': 'mx'}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bac08c00-1869-43e6-9f92-be701244f60b",
   "metadata": {},
   "source": [
    "a. We need to check whether the dictionary contains the key 'Canada'. We create a new function `is_key` that takes the dictionary `dictionary` and the key to be found `key_name` as inputs. It will then iterate through all keys in the `dictionary` by means of the `keys()` function. If the current `key` in the iteration is equal to the `key_name` which needed to be found, the function `is_key` will return a string saying that the `key_name` is a key. If the `key_name` is not found after iterating through all `key`s, the function will return that the `key_name` is not a key. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e54c648c-91f4-4b8f-9420-053585da8d0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_key(dictionary, key_name):\n",
    "    for key in dictionary.keys():\n",
    "        if key == key_name:\n",
    "            return key_name + ' is a key!'\n",
    "    return key_name + ' is not a key!'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fa07ee11-95e9-45d7-9dba-63babfa42e8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Canada is a key!'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_key(tlds, 'Canada')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94764862-a8c2-4d72-9738-8d8044320e9e",
   "metadata": {},
   "source": [
    "So the function `is_key` found that, indeed, `'Canada'` is a key."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95c7d2e0-e4df-4fef-8f30-eb8c845c26f6",
   "metadata": {},
   "source": [
    "b. The reasoning behind defining a new function `is_key` is the fact that we can now call this function to check whether `France` is a key or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6042fe4a-095d-4fbf-8534-100ab1284324",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'France is not a key!'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_key(tlds, 'France')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b4b48d0-2fcc-4ef8-9e5c-a70d41796094",
   "metadata": {},
   "source": [
    "So the function `is_key` found that `'France'` is not a key in the dictionary `tlds`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0770e1b-675c-4aad-bf4d-4bcc6cf4df10",
   "metadata": {},
   "source": [
    "c. We now iterate through the key-value pairs in the dictionary `tlds` and we will display them in two-column format. We first print our headers, which are `Keys` and `Value`, and we will construct the columns in such a way that both columns are 15 character-spaces apart. This was done to accomodate long country names that are close to 15 letters long (e.g. `United States` is 13 characters (with the space included). Then, for each key-value pair `k` and `v`, where `k` is the key and `v` the associated value, the key `k` is printed in the left column, whereas the value `v` are printed in the right column. This again is done by making sure that there is enough space for long country names, and by fixing the column width to be 15 characters.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1088fbf2-8045-4a44-ad86-5fe2da8e0a24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key            Value\n",
      "Canada         ca\n",
      "United States  us\n",
      "Mexico         mx\n"
     ]
    }
   ],
   "source": [
    "print(f'{\"Key\":<15}Value')\n",
    "for k, v in tlds.items():\n",
    "    print(f'{k:<15}{v}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baec516f-a7da-49a4-93e9-6493ba5b8554",
   "metadata": {},
   "source": [
    "d. We will now add the key-value pair `'Sweden'` and `'sw'`, where `'Sweden'` is the key and `'sw'` its associated value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "15575fa9-af57-48a7-afd9-a962c186ddf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "tlds['Sweden'] = 'sw'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "797e022b-a18e-489f-a07e-ecf42b479ee5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Canada': 'ca', 'United States': 'us', 'Mexico': 'mx', 'Sweden': 'sw'}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tlds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8688b431-6211-4ac4-8416-cb6b33a7209d",
   "metadata": {},
   "source": [
    "We could also use the `update` function to do this, which would be written as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b880f630-c86f-4241-8ae2-429e20d708d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "tlds = {'Canada': 'ca', 'United States': 'us', 'Mexico': 'mx'}\n",
    "tlds.update({'Sweden': 'sw'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3b0185f9-d43f-4cab-9dbd-25238de2cebe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Canada': 'ca', 'United States': 'us', 'Mexico': 'mx', 'Sweden': 'sw'}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tlds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a63be6ac-7b1d-401d-983c-1fdb1769a7f6",
   "metadata": {},
   "source": [
    "e. Now we need to update the value for the key `Sweden` to `se`, which can, again, be done in the two previously-described ways:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f1538071-68b6-4dbb-956d-61047acc3c9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "tlds['Sweden'] = 'se'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "625e774a-1631-4fcb-8c2b-2234de164b59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Canada': 'ca', 'United States': 'us', 'Mexico': 'mx', 'Sweden': 'se'}"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tlds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f47aa682-54ce-4c05-8fb1-42a7ee581abc",
   "metadata": {},
   "outputs": [],
   "source": [
    "tlds = {'Canada': 'ca', 'United States': 'us', 'Mexico': 'mx', 'Sweden': 'sw'}\n",
    "tlds.update({'Sweden': 'se'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2f861b76-b4a6-4d1d-8cb6-b8fedd0fca85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Canada': 'ca', 'United States': 'us', 'Mexico': 'mx', 'Sweden': 'se'}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tlds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fef29a7-77e0-4d45-a781-12a527e4e968",
   "metadata": {},
   "source": [
    "f. We are now asked to reverse the key-value pairs by using dictionary comprehensions. This dictionary comprehension iterates through `tlds.items()`, and unpacks each key-value pair into `country` and `abbreviation`. Then, `abbreviation: country` defines the keys and values for this reversed list, such that the `abbreviation` is now the key of the dictionary and the `country` is the value. We call this reversed dictionary `tlds_reversed`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "04d88b99-c438-40e2-bf5b-dfbd0045e864",
   "metadata": {},
   "outputs": [],
   "source": [
    "tlds_reversed = {abbreviation: country for country, abbreviation in tlds.items()}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "984da21e-2144-4ea0-8486-ace026c09cf3",
   "metadata": {},
   "source": [
    "Let's test out whether it actually worked!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5758f810-cb8b-428e-8ac8-081684265712",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ca': 'Canada', 'us': 'United States', 'mx': 'Mexico', 'se': 'Sweden'}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tlds_reversed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9fb3ced-7ea4-45ba-aadf-84d9ece0b48e",
   "metadata": {},
   "source": [
    "We can see that it did indeed reverse the dictionary in terms of key-value pairs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bab948a6-af99-4f68-9063-5e5f000457b0",
   "metadata": {},
   "source": [
    "g. Now, we are asked to use a dictionary comprehension to convert the country names to all capital letters. This dictionary comprehension iterates through `tlds.reversed.items()`, and unpacks each key-value pair into `abbreviation` and `country`. Then, we define the key-value pairs as `abbreviation` and `country.upper()`, so that the original keys stay the same but the original values are now written in all uppercase. We name this new dictionary `tlds_reversed_upper`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a395771c-aeae-4790-b6ec-e90470965cc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "tlds_reversed_upper = {abbreviation: country.upper() for abbreviation, country in tlds_reversed.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "dd720f4b-3a65-40ef-bba6-3bc0349eef93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ca': 'CANADA', 'us': 'UNITED STATES', 'mx': 'MEXICO', 'se': 'SWEDEN'}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tlds_reversed_upper"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2834bdea-b9db-4a1f-ac8c-74914db2e775",
   "metadata": {},
   "source": [
    "We can see that indeed all `country`s are now stored in uppercase letters exclusively."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64944f16-5d4b-4f48-9aa4-8b0d5dc6718e",
   "metadata": {},
   "source": [
    "# 7.2 Broadcasting"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34289879-5ca2-4ee8-af6e-21ab5a2b1dd8",
   "metadata": {},
   "source": [
    "We are asked to use `arange` to create a 2-by-2 `array` containing the numbers `0` until `3`. We first import `numpy` as `np` to be able to use `arange` and `reshape`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a2f340ae-c498-4ab5-b9d6-bd75b2709828",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff7bcdc6-e90b-4ba9-982e-10c090102f05",
   "metadata": {},
   "source": [
    "Now, we use `numpy`, abbreviated as `np` since we imported it like that, to create an array containing the numbers `0` until `3` by the code `np.arange(0, 4)`, and reshape it into a 2-by-2 `array` by using `reshape(2, 2)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9e56dc00-d22c-411c-ba38-8990d5c856f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers = np.arange(0, 4).reshape(2, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1d065954-5b78-494f-84fe-a40bc4f85f1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1],\n",
       "       [2, 3]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "000576aa-0205-4ac0-bbd3-9592bc59fdd9",
   "metadata": {},
   "source": [
    "a. Now that we have this 2-by-2 `array`, we need to cube every element of the array. We can do this in the same way as with e.g. integers, namely by typing `** 3`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6319a8b6-8b71-4b35-90ec-28d431f45037",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1],\n",
       "       [ 8, 27]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers ** 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e3f9a34-9b64-428d-a058-362fa2d3a211",
   "metadata": {},
   "source": [
    "We see that indeed every element of the original `numbers` is now cubed! We do not store the resulting array in a variable, since we need to perform all operations on the original `array`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a734da3f-b486-465d-9b4c-29aaae989954",
   "metadata": {},
   "source": [
    "b. Now, we need to add `7` to every element of `numbers`. Again, we do this in the same way as with e.g. integers, namely by typing `+ 7`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "54b3e3f5-72ba-4e26-b0fd-aaea986307de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 7,  8],\n",
       "       [ 9, 10]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers + 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "191eebf8-5c82-4a98-bcf3-c6b380f66dfc",
   "metadata": {},
   "source": [
    "Again, we see that `7` has been added to each element of the original `numbers`. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0094de43-2f4e-4220-a0e4-5f89caae0e48",
   "metadata": {},
   "source": [
    "Finally, we need to multiply every element of `numbers` by `2`, which we again do by just multiplying the array `numbers` by `2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7a92b3bb-ed04-43cd-826f-444bfd2cb63e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 2],\n",
       "       [4, 6]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers * 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "098faed0-97fe-494d-a42a-5848fc9f499f",
   "metadata": {},
   "source": [
    "We can see that all elements are multiplied by `2`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4ba7bf3-b400-4eb6-8b3a-827bdd9ec015",
   "metadata": {
    "tags": []
   },
   "source": [
    "# 7.3 Element-wise array multiplication"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa6de0c5-03f5-4de2-9f5a-be998425524f",
   "metadata": {},
   "source": [
    "We need to create a 3-by-3 `array` containing the even integers starting from `2` until `18`. Then, we need to create another 3-by-3 `array` containing the integers from `9` until `1`. Finally, we are asked to multiply the firstly created `array` by the secondly created `array`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88d84deb-fe77-481e-8a5f-f0128ead4042",
   "metadata": {},
   "source": [
    "We first import `numpy` as `np` again (for completeness purposes)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8a4cd20a-43bd-491a-b213-68850d1e1fc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e32c219-f625-4b4d-91a5-0958c098da11",
   "metadata": {},
   "source": [
    "Now, we create our first `array` `numbers_1`, where we start with the integer `2` and end as soon as we have reached `20` (which is not going to be included). We do this with steps of `2` to ensure that we get only the even integers. This is what the code snippet `np.arange(2, 20, 2)` does. Then, we `reshape` this `array` into a 3-by-3 `array`, and store it in the variable `numbers_1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "bc7e84a4-4853-4421-b797-2bd91999adab",
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers_1 = np.arange(2, 20, 2).reshape(3, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b1244121-5b53-4e2b-8731-e59a6a945f35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2,  4,  6],\n",
       "       [ 8, 10, 12],\n",
       "       [14, 16, 18]])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad9ab619-e426-4f38-91f3-353f58a9c7d6",
   "metadata": {},
   "source": [
    "Now, for `numbers_2`, we create another `array` that starts with a `9` and counts down until `0` (not included) in (decreasing) steps of 1. This is what the code snippet `np.arange(9, 0, -1)` does. Then, we `reshape` this `array` into another 3-by-3 `array` and store it in the variable `numbers_2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "58d31190-d537-45c5-931b-6175d3a3f190",
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers_2 = np.arange(9, 0, -1).reshape(3, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c525978b-9d2e-43a8-b319-d6e261eb3cb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[9, 8, 7],\n",
       "       [6, 5, 4],\n",
       "       [3, 2, 1]])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9030cd2c-5a15-475c-8c19-2160041f666f",
   "metadata": {},
   "source": [
    "Now, we multiply the `array` `numbers_1` with the `array` `numbers_2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0895934b-d622-478a-b35f-34b119660afe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[18, 32, 42],\n",
       "       [48, 50, 48],\n",
       "       [42, 32, 18]])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers_1 * numbers_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a414516-9231-4d84-8ce0-b035f140d3b8",
   "metadata": {},
   "source": [
    "We see that it was element-wise multiplication instead of matrix multiplication! "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d0ce28a-1535-4145-baad-edc79341d7a4",
   "metadata": {},
   "source": [
    "# 7.9 Indexing and slicing arrays"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "589f0b51-4afc-404a-b82d-c037699bb3c0",
   "metadata": {},
   "source": [
    "We first import `numpy` as `np` again (for completeness purposes)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a7a29a9e-3153-4d4e-8344-d4b36b925da3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b462480-cd89-48a5-bac5-98f7c282a8ab",
   "metadata": {},
   "source": [
    "Now, we create our `array` `numbers`, where we start with the integer `1` and end as soon as we have reached `16` (which is not going to be included). We do this with steps of `1` (the default). This is what the code snippet `np.arange(1, 16)` does. Then, we `reshape` this `array` into a 3-by-5 `array`, and store it in the variable `numbers`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "76ac3697-7e17-45b9-b944-8201b92c1ff2",
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers = np.arange(1, 16).reshape(3, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "25a4fefe-9787-4364-a9a6-878a648ed0e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3,  4,  5],\n",
       "       [ 6,  7,  8,  9, 10],\n",
       "       [11, 12, 13, 14, 15]])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff9c2dd3-00b1-4d31-b3fc-8850ff493629",
   "metadata": {},
   "source": [
    "a. Now, we select row `2` of the `array` `numbers` as follows, namely by specifying only one index `2` in square brackets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "bb4ffb6a-9c09-407c-8b90-526f8aab46f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([11, 12, 13, 14, 15])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "964b53c4-78cd-4163-baf4-abf4857810a2",
   "metadata": {},
   "source": [
    "b. Now, we select column `4` of the `array` `numbers` as follows, namely by providing a tuple specifying that we want all rows (:) and only column `4`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6df029d3-2441-43b6-a038-6f21cc72df4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5, 10, 15])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers[:, 4]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff4334cb-0b64-42cf-87c7-6e68cdfa01bd",
   "metadata": {},
   "source": [
    "c. We select row `0` and `1` of the `array` `numbers` as follows, namely by using slice notation `0:2`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ce7cced9-843d-4f80-bb0c-49cbb2fa6d21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3,  4,  5],\n",
       "       [ 6,  7,  8,  9, 10]])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers[0:2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "156fc045-e9eb-4d76-a4aa-3004e4782a82",
   "metadata": {},
   "source": [
    "d. We select columns `2` through `4` of the `array` `numbers` as follows, namely by providing a tuple specifying that we want all rows (:) and the column-slice `2:5`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "222a542a-a9e5-4886-a389-e88788c97513",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3,  4,  5],\n",
       "       [ 8,  9, 10],\n",
       "       [13, 14, 15]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers[:, 2:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81c7bc3a-c045-46cb-99f4-ee3ab13622c3",
   "metadata": {},
   "source": [
    "e. We select the element in row `1` and column `4` of the `array` `numbers` as follows, namely by specifying a tuple containing the element's row index `1` and column index `4` in square brackets: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a608da01-ade6-45f4-8964-7f67bb5d6042",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers[1,4]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d444ac7-6d5a-40ae-9a25-4dc55214b28e",
   "metadata": {},
   "source": [
    "f. We select the elements in rows `1` and `2` that are in columns `0`, `2` or `4` by specifying a tuple containing the elements' row indices (slice `1:3`) and column indices (list `[0, 2, 4]`):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ccfb3895-9084-40ac-9a97-cb889924f175",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 6,  8, 10],\n",
       "       [11, 13, 15]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers[1:3, [0, 2, 4]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0ec33fe-29c8-40d1-b69b-75a5f327d268",
   "metadata": {},
   "source": [
    "# 7.14 Horizontal and vertical stacking"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf892e26-83d9-4516-aec2-5bda594fca64",
   "metadata": {},
   "source": [
    "In this exercise, we are asked to create two two-dimensional `arrays` `array1` and `array2`. We will use these `array`s to do horizontal and vertical stacking."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c96867f4-7a81-41d8-8d9e-6689888e3b67",
   "metadata": {},
   "source": [
    "We first import `numpy` as `np` again (for completeness purposes)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "592b3236-3288-4a90-8cd8-8d1312bbfdf8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5117bd30-1b6e-49ec-84ff-52498c3efdfe",
   "metadata": {},
   "source": [
    "Now, we create the two `array`s, as specified in the exercise:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e4b73a23-538e-4889-8331-ebf0b398b5d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "array1 = np.array([[0, 1], [2, 3]])\n",
    "array2 = np.array([[4, 5], [6, 7]])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "589562c7-4ecc-4487-8f88-91db2bf147c7",
   "metadata": {},
   "source": [
    "a. We need to use vertical stacking to create the 4-by-2 `array` named `array3` with `array1` stacked on top of `array2`. We do this by using `np.vstack`, where the first element of the tuple (`array1`) is stacked on top of the second (`array2`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "888f428a-3f8c-4cfe-84a7-60972f985c6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "array3 = np.vstack((array1, array2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "a356cd99-4937-46d4-b788-174fab93e756",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1],\n",
       "       [2, 3],\n",
       "       [4, 5],\n",
       "       [6, 7]])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c9df175-c71d-4151-9c4f-467fc86fa1ee",
   "metadata": {},
   "source": [
    "It worked!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f2bb973-69b6-4102-99a2-4c61e046b0d9",
   "metadata": {},
   "source": [
    "b. Now, we need to use horizontal stacking to create the 2-by-4 `array` named `array4` with `array2` to the right of `array1`. We do this by using `np.hstack`, where the first element of the tuple (`array1`) is stacked to the left of the second element (`array2`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f5846a2f-fa76-442d-94dc-74715cb86307",
   "metadata": {},
   "outputs": [],
   "source": [
    "array4 = np.hstack((array1, array2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "af919b10-66e3-48be-aecc-2c4097b4f680",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 4, 5],\n",
       "       [2, 3, 6, 7]])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98811903-d2c2-4a60-8bff-28574d1cff28",
   "metadata": {},
   "source": [
    "c. We are asked to vertical-stack two copies of `array4` to create a 4-by-4 `array5`. We use `np.vstack` to do this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d97391bf-ddbb-44ea-b2d1-083766dd0cb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "array5 = np.vstack((array4, array4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "353f2646-176c-489a-9414-9899c5f19ae6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 4, 5],\n",
       "       [2, 3, 6, 7],\n",
       "       [0, 1, 4, 5],\n",
       "       [2, 3, 6, 7]])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f55b5319-1987-41d5-9dac-644a28a60400",
   "metadata": {},
   "source": [
    "d. Finally, we are asked to horizontal-stack two copies of `array3` to create a 4-by-4 `array6`. We again use `np.hstack` to do this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "aeb11094-4af4-43ab-a1ac-dc983baae459",
   "metadata": {},
   "outputs": [],
   "source": [
    "array6 = np.hstack((array3, array3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d9b5923f-c59c-4d0a-94d5-2708a224d11b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 0, 1],\n",
       "       [2, 3, 2, 3],\n",
       "       [4, 5, 4, 5],\n",
       "       [6, 7, 6, 7]])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array6"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
