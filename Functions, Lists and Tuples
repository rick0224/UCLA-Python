{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9464c5e7-df72-4e63-af33-7ffee50c23b9",
   "metadata": {},
   "source": [
    "# 005856021 (UID) - Assignment Week 3 - Rick Kessels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "131686e4-5224-4e1e-b513-b017ec0162b0",
   "metadata": {},
   "source": [
    "Self-assessment: The homework went pretty well! I think I understand all material and exercises. I accidentally looked at the wrong syllabus, so I made most of the optional exercises. For 4.14, I have skipped the returning of `True` and `False` for the `check_solution` function and integrated the implications of an (in)correct answer into the function itself."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "081dc281-c780-4b33-8608-1a824e37b4cb",
   "metadata": {},
   "source": [
    "# 4.3 What's wrong with this code?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1ede34e-5b11-4241-a7f9-d5e5b121b1ba",
   "metadata": {},
   "source": [
    "The following code is given in the exercise:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "44ed3556-8a4e-497c-a7bd-d7a01ebdf6b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cube(x):\n",
    "    \"\"\"Calculate the cube of x.\"\"\"\n",
    "    x ** 3\n",
    "    print('The cube of 2 is', cube(2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f46a0bcb-6717-46ae-a900-faca6cc46c32",
   "metadata": {},
   "source": [
    "This function `cube(x)` prints a string instead of returning a value. In this string, the same function `cube` is called again, leading to an infinite recursion. We can see how this goes wrong when parsing `x = 3` into the function by calling `cube(3)`. We know that $3^{3} = 27$. The desired calculation will be made by the line `x ** 3`, but the result of this calculation is not returned. Instead, the function will try to print the function-embedded expression in the last line, from which the same function is called again, now with `x = 2`. The function will be called infinitely many times, leading to a recursion error as is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d2f6282a-bf8d-4ae6-8b49-5344abc2f989",
   "metadata": {},
   "outputs": [
    {
     "ename": "RecursionError",
     "evalue": "maximum recursion depth exceeded",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRecursionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/4275864078.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcube\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/81868986.py\u001b[0m in \u001b[0;36mcube\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;34m\"\"\"Calculate the cube of x.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m**\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The cube of 2 is'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcube\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "... last 1 frames repeated, from the frame below ...\n",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/81868986.py\u001b[0m in \u001b[0;36mcube\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;34m\"\"\"Calculate the cube of x.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m**\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The cube of 2 is'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcube\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mRecursionError\u001b[0m: maximum recursion depth exceeded"
     ]
    }
   ],
   "source": [
    "cube(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "759935af-885c-4286-aebb-d93b3b82fdc7",
   "metadata": {},
   "source": [
    "We could fix the problem by implementing a `return` statement instead of using the `print` function within the function. This looks as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f73bcfda-ef10-4e0c-b04a-9fd6ee482a13",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cube(x):\n",
    "    \"\"\"Calculate the cube of x.\"\"\"\n",
    "    return x ** 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca415b82-6c46-4c54-9877-48aeb209d82e",
   "metadata": {},
   "source": [
    "Since we implemented the `return` statement in the function, we can now call the function and expect to see the cube of the value of `x` parsed into the function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1e89f94f-673c-4426-9159-b543a6d0819a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cube(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "095d7f6b-9bca-408d-9624-e76fccf1dddf",
   "metadata": {},
   "source": [
    "We could even try to implement the `print` statement as was attempted in the original snippet of code. This means we have to make the `string` dependent on the value of `x` parsed as an input into the function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ac321596-e85c-4fb7-aa4b-5ab92f0e7ce7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cube(x):\n",
    "    \"\"\"Calculate the cube of x.\"\"\"\n",
    "    x_cubed = x ** 3\n",
    "    print('The cube of', x, 'is', x_cubed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9c82e12d-0d78-4f3b-b522-38433295fa9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The cube of 3 is 27\n"
     ]
    }
   ],
   "source": [
    "cube(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "806039e0-6507-469b-baa5-2516640d5152",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The cube of 2 is 8\n"
     ]
    }
   ],
   "source": [
    "cube(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "831164c3-2b61-4062-816d-cb9c2660288f",
   "metadata": {},
   "source": [
    "We can see from the examples that the resulting `string` changes with the value of `x`, which is what we wanted."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bfab55d-e878-44b0-acdd-2fa15d9097e6",
   "metadata": {},
   "source": [
    "# 4.9 Temperature conversion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44ef8ba6-a22b-456a-9648-dfa08332e6bb",
   "metadata": {},
   "source": [
    "The exercise states that we need to implement a function `fahrenheit` that returns the Fahrenheit equivalent of a Celcius temperature. The following formula can be used to convert a temperature in Celcius to a temperature in Fahrenheit: $^{\\circ}\\!F = \\frac{9}{5} ^{\\circ}\\!C + 32$, where $^{\\circ}\\!F$ is the temperature in degrees Fahrenheit and $^{\\circ}C$ is the temperature in degrees Celcius. We can define the function `fahrenheit` as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "391ccba4-fe44-4285-be26-0e630e167dcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fahrenheit(degrees_celcius):\n",
    "    \"\"\"Calculate the Fahrenheit equivalent of an inputted Celcius temperature degrees_celcius.\"\"\"\n",
    "    degrees_fahrenheit = (9 / 5) * degrees_celcius + 32\n",
    "    return degrees_fahrenheit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9f12c10-4945-498e-89b1-66cdf2c27d1e",
   "metadata": {},
   "source": [
    "Let us try out the function!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f731f5fc-d532-4248-97ca-29711fff3762",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fahrenheit(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2c46ee41-e9e5-4d1a-a611-16186e7ebe28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "212.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fahrenheit(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07a2a5c9-fed5-4ccd-aa2c-5faed1129195",
   "metadata": {},
   "source": [
    "It seems to work fine! We could even make the function shorter by returning the result immediately:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4af6ae69-3808-4b1e-9532-66d69b9cd2f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fahrenheit(degrees_celcius):\n",
    "        return (9 / 5) * degrees_celcius + 32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "21259ff0-1700-456e-86bc-43498de906ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fahrenheit(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cfd0bd94-b795-44c6-a641-dde967a0148c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "212.0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fahrenheit(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c33150c-c601-4463-a32d-586257304755",
   "metadata": {},
   "source": [
    "We can now print the results for all integer temperatures between the freezing point (0 $^{\\circ}C$) and the boiling point (100 $^{\\circ}C$). We use one digit precision by including `1f` in our print statement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0858ba90-8787-46d2-92fe-6d55bd2ca992",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Celcius     Fahrenheit\n",
      "    0.0           32.0\n",
      "    1.0           33.8\n",
      "    2.0           35.6\n",
      "    3.0           37.4\n",
      "    4.0           39.2\n",
      "    5.0           41.0\n",
      "    6.0           42.8\n",
      "    7.0           44.6\n",
      "    8.0           46.4\n",
      "    9.0           48.2\n",
      "   10.0           50.0\n",
      "   11.0           51.8\n",
      "   12.0           53.6\n",
      "   13.0           55.4\n",
      "   14.0           57.2\n",
      "   15.0           59.0\n",
      "   16.0           60.8\n",
      "   17.0           62.6\n",
      "   18.0           64.4\n",
      "   19.0           66.2\n",
      "   20.0           68.0\n",
      "   21.0           69.8\n",
      "   22.0           71.6\n",
      "   23.0           73.4\n",
      "   24.0           75.2\n",
      "   25.0           77.0\n",
      "   26.0           78.8\n",
      "   27.0           80.6\n",
      "   28.0           82.4\n",
      "   29.0           84.2\n",
      "   30.0           86.0\n",
      "   31.0           87.8\n",
      "   32.0           89.6\n",
      "   33.0           91.4\n",
      "   34.0           93.2\n",
      "   35.0           95.0\n",
      "   36.0           96.8\n",
      "   37.0           98.6\n",
      "   38.0          100.4\n",
      "   39.0          102.2\n",
      "   40.0          104.0\n",
      "   41.0          105.8\n",
      "   42.0          107.6\n",
      "   43.0          109.4\n",
      "   44.0          111.2\n",
      "   45.0          113.0\n",
      "   46.0          114.8\n",
      "   47.0          116.6\n",
      "   48.0          118.4\n",
      "   49.0          120.2\n",
      "   50.0          122.0\n",
      "   51.0          123.8\n",
      "   52.0          125.6\n",
      "   53.0          127.4\n",
      "   54.0          129.2\n",
      "   55.0          131.0\n",
      "   56.0          132.8\n",
      "   57.0          134.6\n",
      "   58.0          136.4\n",
      "   59.0          138.2\n",
      "   60.0          140.0\n",
      "   61.0          141.8\n",
      "   62.0          143.6\n",
      "   63.0          145.4\n",
      "   64.0          147.2\n",
      "   65.0          149.0\n",
      "   66.0          150.8\n",
      "   67.0          152.6\n",
      "   68.0          154.4\n",
      "   69.0          156.2\n",
      "   70.0          158.0\n",
      "   71.0          159.8\n",
      "   72.0          161.6\n",
      "   73.0          163.4\n",
      "   74.0          165.2\n",
      "   75.0          167.0\n",
      "   76.0          168.8\n",
      "   77.0          170.6\n",
      "   78.0          172.4\n",
      "   79.0          174.2\n",
      "   80.0          176.0\n",
      "   81.0          177.8\n",
      "   82.0          179.6\n",
      "   83.0          181.4\n",
      "   84.0          183.2\n",
      "   85.0          185.0\n",
      "   86.0          186.8\n",
      "   87.0          188.6\n",
      "   88.0          190.4\n",
      "   89.0          192.2\n",
      "   90.0          194.0\n",
      "   91.0          195.8\n",
      "   92.0          197.6\n",
      "   93.0          199.4\n",
      "   94.0          201.2\n",
      "   95.0          203.0\n",
      "   96.0          204.8\n",
      "   97.0          206.6\n",
      "   98.0          208.4\n",
      "   99.0          210.2\n",
      "  100.0          212.0\n"
     ]
    }
   ],
   "source": [
    "print(f'Celcius{\"Fahrenheit\":>15}')\n",
    "\n",
    "for degrees_celcius in range(0, 101):\n",
    "    print(f'{degrees_celcius:>7.1f}{fahrenheit(degrees_celcius):>15.1f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44ca54d3-851b-437a-868b-f1d8f6aece02",
   "metadata": {},
   "source": [
    "We can also include the formatting in the function already, which would look as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ebabf5d5-f8a5-404a-b292-418e548062f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fahrenheit(degrees_celcius):\n",
    "    \"\"\"Calculate the Fahrenheit equivalent of an inputted Celcius temperature degrees_celcius.\"\"\"\n",
    "    degrees_fahrenheit = (9 / 5) * degrees_celcius + 32\n",
    "    return(f'{degrees_celcius:>7.1f}{degrees_fahrenheit:>15.1f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "db9e9627-1250-485a-94b0-42f44b9023d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Celcius     Fahrenheit\n",
      "    0.0           32.0\n",
      "    1.0           33.8\n",
      "    2.0           35.6\n",
      "    3.0           37.4\n",
      "    4.0           39.2\n",
      "    5.0           41.0\n",
      "    6.0           42.8\n",
      "    7.0           44.6\n",
      "    8.0           46.4\n",
      "    9.0           48.2\n",
      "   10.0           50.0\n",
      "   11.0           51.8\n",
      "   12.0           53.6\n",
      "   13.0           55.4\n",
      "   14.0           57.2\n",
      "   15.0           59.0\n",
      "   16.0           60.8\n",
      "   17.0           62.6\n",
      "   18.0           64.4\n",
      "   19.0           66.2\n",
      "   20.0           68.0\n",
      "   21.0           69.8\n",
      "   22.0           71.6\n",
      "   23.0           73.4\n",
      "   24.0           75.2\n",
      "   25.0           77.0\n",
      "   26.0           78.8\n",
      "   27.0           80.6\n",
      "   28.0           82.4\n",
      "   29.0           84.2\n",
      "   30.0           86.0\n",
      "   31.0           87.8\n",
      "   32.0           89.6\n",
      "   33.0           91.4\n",
      "   34.0           93.2\n",
      "   35.0           95.0\n",
      "   36.0           96.8\n",
      "   37.0           98.6\n",
      "   38.0          100.4\n",
      "   39.0          102.2\n",
      "   40.0          104.0\n",
      "   41.0          105.8\n",
      "   42.0          107.6\n",
      "   43.0          109.4\n",
      "   44.0          111.2\n",
      "   45.0          113.0\n",
      "   46.0          114.8\n",
      "   47.0          116.6\n",
      "   48.0          118.4\n",
      "   49.0          120.2\n",
      "   50.0          122.0\n",
      "   51.0          123.8\n",
      "   52.0          125.6\n",
      "   53.0          127.4\n",
      "   54.0          129.2\n",
      "   55.0          131.0\n",
      "   56.0          132.8\n",
      "   57.0          134.6\n",
      "   58.0          136.4\n",
      "   59.0          138.2\n",
      "   60.0          140.0\n",
      "   61.0          141.8\n",
      "   62.0          143.6\n",
      "   63.0          145.4\n",
      "   64.0          147.2\n",
      "   65.0          149.0\n",
      "   66.0          150.8\n",
      "   67.0          152.6\n",
      "   68.0          154.4\n",
      "   69.0          156.2\n",
      "   70.0          158.0\n",
      "   71.0          159.8\n",
      "   72.0          161.6\n",
      "   73.0          163.4\n",
      "   74.0          165.2\n",
      "   75.0          167.0\n",
      "   76.0          168.8\n",
      "   77.0          170.6\n",
      "   78.0          172.4\n",
      "   79.0          174.2\n",
      "   80.0          176.0\n",
      "   81.0          177.8\n",
      "   82.0          179.6\n",
      "   83.0          181.4\n",
      "   84.0          183.2\n",
      "   85.0          185.0\n",
      "   86.0          186.8\n",
      "   87.0          188.6\n",
      "   88.0          190.4\n",
      "   89.0          192.2\n",
      "   90.0          194.0\n",
      "   91.0          195.8\n",
      "   92.0          197.6\n",
      "   93.0          199.4\n",
      "   94.0          201.2\n",
      "   95.0          203.0\n",
      "   96.0          204.8\n",
      "   97.0          206.6\n",
      "   98.0          208.4\n",
      "   99.0          210.2\n",
      "  100.0          212.0\n"
     ]
    }
   ],
   "source": [
    "print(f'Celcius{\"Fahrenheit\":>15}')\n",
    "\n",
    "for degrees_celcius in range(0, 101):\n",
    "    print(fahrenheit(degrees_celcius))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "736b1e95-9c63-4263-8bb8-bb0ef0d52bf1",
   "metadata": {},
   "source": [
    "# 4.14 Computer-assisted instruction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f11699ab-b56c-448d-b543-304d83aac264",
   "metadata": {},
   "source": [
    "In this exercise, we will create a Computer-assisted instruction (CAI) to help students to learn multiplication. We need to randomly generate two positive one-digit integers that have to be multiplied by the student. If the student gives the correct answer, a new problem will be generated. If the student gives an incorrect answer, they will get an infinite number of tries to get it right, after which a new problem is generated."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e2ec3b1-0142-4b08-a31b-0e299e0f8e42",
   "metadata": {},
   "source": [
    "Since we have to generate random integers between 1 and 9 (inclusive), we have to import `random`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b4f090b4-6302-490f-937e-8f377c8ab138",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bf07283-a4ee-4388-a31a-95b3446d28eb",
   "metadata": {},
   "source": [
    "Now, we create a function `create_integers`, that will randomly draw two integers between 1 and 9 (inclusive). The function will return these two integers in tuple-form."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "913f6fe9-d7c9-4bb9-9b80-1ea4265f8c84",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_integers():\n",
    "    \"\"\"Randomly generate two positive one-digit integers.\"\"\"\n",
    "    integer1 = random.randrange(1,10)\n",
    "    integer2 = random.randrange(1,10)\n",
    "    return (integer1, integer2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "808f1da9-cf17-481f-9586-c2c0462dc06b",
   "metadata": {},
   "source": [
    "Now, we need a function `display_problem` that takes the randomly generated `integers` as an input and will display the multiplication problem that needs to be solved. We parse the tuple `integers` as an input here, and unpack them into the two seperate integers. Then, we can print the problem, and ask the student to put their answer as an input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "18854c53-a411-4aaf-b6a7-6f67d5a1da72",
   "metadata": {},
   "outputs": [],
   "source": [
    "def display_problem(integers):\n",
    "    \"\"\"Display the multiplication problem that needs to be solved.\"\"\"\n",
    "    integer1, integer2 = integers\n",
    "    return(int(input(f'How much is {integer1} times {integer2}?')))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8521223-eaf0-4aad-a2be-450931fd096f",
   "metadata": {},
   "source": [
    "As soon as the student has answered the question, we want to check their answer for correctness. This function `check_answers` takes as input the variables `integers`, which is a tuple of the two randomly generated integers, and `answer_given`, in which we will store the most recent answer given by the student. We first unpack the `integers` into two separate integers, and then we will check whether the `answer_given` is actually correct. If so, we print \"Very good!\" and create new integers. If the answer is incorrect, we will print \"No. Please try again.\". Finally, we will call the `display_problem` function again with either the newly generated `integers` in case the student gave the correct answer, or the previous problem with the previous `integers` in case the student gave the incorrect answer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0933e1a9-99c9-46d6-81b4-f761b57f30ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_answer(integers, answer_given):\n",
    "    \"\"\"Check whether the answer to the multiplication problem given by the student is correct.\"\"\"\n",
    "    integer1, integer2 = integers\n",
    "    if (answer_given == integer1 * integer2):\n",
    "        print(\"Very good!\")\n",
    "        integers = create_integers()\n",
    "    else:\n",
    "        print(\"No. Please try again.\")\n",
    "    \n",
    "    answer_given = display_problem(integers)\n",
    "    check_answer(integers, answer_given)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2141eaae-78c2-4fc9-80ef-c2a31793c182",
   "metadata": {},
   "source": [
    "To start the process off, we need to call `create_integers` function to generate the first two integers, and we need to store these as a tuple in `integers`. Then, we call the function `display_problem` with input `integers`, and store the answer given by the student in `answer_given`. Finally, we call the `check_answer` function to check the first answer given by the student. From here onwards, the process as described earlier will go on indefinitely."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5c279fbb-0642-4609-84b7-a55e6f446a8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How much is 3 times 4? 12\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Very good!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How much is 9 times 6? 49\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. Please try again.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How much is 9 times 6? 54\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Very good!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How much is 6 times 2? 12\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Very good!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How much is 3 times 5? 15\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Very good!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How much is 9 times 7? 11\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. Please try again.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How much is 9 times 7? 22\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. Please try again.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How much is 9 times 7? 63\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Very good!\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/346020253.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mintegers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_integers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0manswer_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_problem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mcheck_answer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manswer_given\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/819945773.py\u001b[0m in \u001b[0;36mcheck_answer\u001b[0;34m(integers, answer_given)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0manswer_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_problem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mcheck_answer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manswer_given\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/819945773.py\u001b[0m in \u001b[0;36mcheck_answer\u001b[0;34m(integers, answer_given)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0manswer_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_problem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mcheck_answer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manswer_given\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/819945773.py\u001b[0m in \u001b[0;36mcheck_answer\u001b[0;34m(integers, answer_given)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0manswer_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_problem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mcheck_answer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manswer_given\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/819945773.py\u001b[0m in \u001b[0;36mcheck_answer\u001b[0;34m(integers, answer_given)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0manswer_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_problem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mcheck_answer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manswer_given\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/819945773.py\u001b[0m in \u001b[0;36mcheck_answer\u001b[0;34m(integers, answer_given)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0manswer_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_problem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mcheck_answer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manswer_given\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/819945773.py\u001b[0m in \u001b[0;36mcheck_answer\u001b[0;34m(integers, answer_given)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0manswer_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_problem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mcheck_answer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manswer_given\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/819945773.py\u001b[0m in \u001b[0;36mcheck_answer\u001b[0;34m(integers, answer_given)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0manswer_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_problem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mcheck_answer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manswer_given\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/819945773.py\u001b[0m in \u001b[0;36mcheck_answer\u001b[0;34m(integers, answer_given)\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"No. Please try again.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0manswer_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_problem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0mcheck_answer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manswer_given\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/var/folders/6d/c5b24kg93tscytx18y6_2f4m0000gn/T/ipykernel_21081/3754424440.py\u001b[0m in \u001b[0;36mdisplay_problem\u001b[0;34m(integers)\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;34m\"\"\"Display the multiplication problem that needs to be solved.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0minteger1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minteger2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mintegers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'How much is {integer1} times {integer2}?'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1004\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m             )\n\u001b[0;32m-> 1006\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1007\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1008\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"shell\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1049\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1050\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1051\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1052\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1053\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "integers = create_integers()\n",
    "answer_given = display_problem(integers)\n",
    "check_answer(integers, answer_given)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f22ff4b-8377-4387-99a8-f6fe655389da",
   "metadata": {},
   "source": [
    "# 5.6 Functions returning tuples"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43ecebde-8a2f-4852-9b09-e00d726d3b8f",
   "metadata": {},
   "source": [
    "We are asked to define a function `rotate` that takes three arguments as an input and rotates them one place to the right (the last argument will become the first). The function should return a tuple containing these shifted arguments."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f100e87-7312-4a2d-a903-b1b1d41aacea",
   "metadata": {},
   "source": [
    "We first define the following variables for testing purposes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "76d3f5f1-f2e8-4a4e-9256-7ad7591b299e",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 'Doug'\n",
    "b = 22\n",
    "c = 1984"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ea2fa0f-af79-4606-bdac-cf2e8a95694a",
   "metadata": {},
   "source": [
    "Now, we will define the function `rotate`. This function takes three arguments as input (namely `argument1`, `argument2` and `argument3`. The function will return a tuple where each argument is shifted one position to the right, and the last argument will be in the very first position. This means that the output in terms of the example will be `(argument3, argument1, argument2)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9d5b01fc-6f30-4318-b70a-1d7ba48d00b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rotate(argument1, argument2, argument3):\n",
    "    \"\"\"Rotating the three parsed arguments to the right.\"\"\"\n",
    "    return (argument3, argument1, argument2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4e99c70-1d79-4f6e-af13-a47d8505a2f0",
   "metadata": {},
   "source": [
    "Let us now call the function on the previously defined variables `a`, `b` and `c`. We unpack the returned tuple into `a`, `b` and `c` respectively, thereby redefining the values allocated to these variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2230aab6-a138-42a0-8fc5-2ff33612310b",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = rotate(a, b, c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7c521175-f5c4-4c30-9fce-fdd13a3b11cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1984, 'Doug', 22)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a, b, c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bc7d324-40a3-4845-9372-903ab886768d",
   "metadata": {},
   "source": [
    "We indeed see that the argument at index 2 is now at index 0, whereas the arguments at index 0 and 1 are at index 1 and 2 respectively. Let's try calling the function `rotate` again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0b4d5fe6-96b1-4c5f-a569-53d896a883a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = rotate(a, b, c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3b963132-02ea-47a5-924d-b0e4e753b7d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(22, 1984, 'Doug')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a, b, c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d372d56-1f3f-486c-ad53-815a37a8fa17",
   "metadata": {},
   "source": [
    "Again, we see the desired result! Let's call the function one more time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7f258248-71aa-4d47-b574-9de348e9d3a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = rotate(a, b, c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "02395777-c4fc-4ee1-b61e-e4c160707f53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Doug', 22, 1984)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a, b, c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ad83416-f458-4ee2-a96f-0fa2fbf0cc1a",
   "metadata": {},
   "source": [
    "That's the original tuple! Like expected, after calling the function three times, we're back to the original."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c17469e1-6cff-4e52-a42f-6fcfef005f56",
   "metadata": {},
   "source": [
    "# 5.7 Duplicate elimination"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1655f7c-8cd7-425e-910c-d722c40d7f70",
   "metadata": {},
   "source": [
    "We need to create a function `eliminate_duplicates` that takes a list as an input and will eliminate all duplicates and return the sorted duplicate-free list. For this, we create a `list_new` that we initialize to be an empty list. Then, for each `element` in the original list `list_original`, we check whether this `element` is not yet present in `list_new`. Only then we will add this `element` to `list_new`. When we have checked all the elements in the `list_original` and thus have added all unique elements to `list_new`, we will sort `list_new` by means of the `sort` function. Finally, we will return this sorted `list_new`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "cfe9e05a-928b-4501-ad97-3d24ce824543",
   "metadata": {},
   "outputs": [],
   "source": [
    "def eliminate_duplicates(list_original):\n",
    "    \"\"\"Eliminate the duplicates in the list parsed as an input, and sort the resulting list.\"\"\"\n",
    "    list_new = []\n",
    "    \n",
    "    for element in list_original:\n",
    "        if element not in list_new:\n",
    "            list_new.append(element)\n",
    "    \n",
    "    list_new.sort()\n",
    "    return list_new"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff9bafae-18e0-4ef0-9e93-1a6d6f278821",
   "metadata": {},
   "source": [
    "Now, we can test our function `eliminate_duplicates` on a list containing integers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c3e5071b-543a-4637-8cfb-8027f913b873",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 4, 5, 8]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eliminate_duplicates([4, 4, 2, 8, 2, 1, 5])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d61a449d-bf47-4916-bab6-f333542b4887",
   "metadata": {},
   "source": [
    "That seems to work! Now, we test our function on a list containing strings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a01d7cf9-d642-422a-bd12-10b224319678",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Arlo', 'Madison', 'Rick']"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eliminate_duplicates(['Rick', 'Madison', 'Rick', 'Arlo', 'Madison'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47943e68-bdbc-4920-9a70-a979135b3ede",
   "metadata": {},
   "source": [
    "That also works!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09c6d4bd-a490-4a77-b176-ba415e5947f8",
   "metadata": {},
   "source": [
    "# Is a sequence sorted?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9f5240b-b61c-4625-9e3e-7b2929a0ada9",
   "metadata": {},
   "source": [
    "We are asked to write a function `is_ordered` that takes a list as its argument and checks whether this list is ordered."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8229ab91-714d-43f3-9fa3-473af5a57013",
   "metadata": {},
   "source": [
    "We define the list parsed as an input to the function to be `list_input`. We set the value of the variable `index` to `0`. While the `index` hasn't reached the value equal to the length of the `list_input` minus one, we check whether the element at the current `index` is smaller than or equal to the next element in `list_input`. If this expression evaluates as `True`, we increase the `index` by one, and the `while` loop will check whether our stopping condition has been reached now. However, if the expression evaluates as `False`, we know `list_input` is not sorted, and we immediately return `False`. If the stopping condition is reached without something (`False`) being returned, we return `True`, as this means we have checked all elements of the list for the non-decreasing feature of a sorted list. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d308ab17-9d31-4eda-97a1-686d315af561",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_ordered(list_input):\n",
    "    \"\"\"Checks whether list_input is sorted.\"\"\"\n",
    "    index = 0\n",
    "    \n",
    "    while index != len(list_input) - 1:\n",
    "        if list_input[index] <= list_input[index + 1]:\n",
    "            index += 1\n",
    "        else:\n",
    "            return False\n",
    "    \n",
    "    return True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "404176ba-a64f-4427-a47f-dcf9a5dd5482",
   "metadata": {},
   "source": [
    "The reasoning behind using a `while` loop because it might be inefficient to iterate through a very long list in case the first two elements are already not in sorted order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a6cf9b12-369b-4542-b677-c5c757aaf87f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered([1, 3, 3, 4, 5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7d8a900a-7bf6-481b-920c-5e7e3bb66286",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered([5, 3, 3, 2, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3483d251-1a63-49ae-8a0d-8148975a9265",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered((1, 2, 3, 5, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "043e5a27-ff66-4a78-817b-66a3d094daa0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered((5, 4, 3, 2, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e9d79dcc-e5ca-42b2-96e5-2b3752d4a2d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered(\"ABCCE\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b5351aa6-6a3b-405d-b77e-849febf0538c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered(\"EDCAA\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58b6912e-8cda-4a26-8937-8d3c159d2c65",
   "metadata": {},
   "source": [
    "They all seem to work fine! The following version is with a `for` loop instead of a `while`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d858ac9f-4786-4239-8bef-6760c78a207b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_ordered(list_input):\n",
    "    \"\"\"Checks whether list_input is sorted.\"\"\"\n",
    "    index = 0\n",
    "    \n",
    "    for index in range(0, len(list_input) - 1):\n",
    "        if list_input[index] > list_input[index + 1]:\n",
    "            return False\n",
    "    \n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ee915ed9-ce62-4a3a-abe7-a877fcb66b98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered([1, 3, 3, 4, 5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "702c5b30-c74e-425c-93f5-379659f7cb9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered([1, 3, 5, 4, 6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d7f04ae5-7d16-4ee7-b096-b9051fb38d4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered(\"ABCCE\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "28d95884-0fcf-4bbd-904c-35243c0d6d57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_ordered(\"EDCAA\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baacc2e6-995c-4ba1-97ed-1c945ead5201",
   "metadata": {},
   "source": [
    "This also seems to work fine!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e3dffd7-f8d5-41c9-9e83-9666362b25ec",
   "metadata": {
    "tags": []
   },
   "source": [
    "# 5.27 Intro to Data Science: Duplicate elimination and counting frequencies"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3affa7fd-49cb-47bc-854f-8587974e4763",
   "metadata": {},
   "source": [
    "We are asked to use list comprehension to create a list of length 50 containing randomly drawn integers between 1 and 10 (inclusive). Then, we are supposed to check all the unique values and their frequencies."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f5903d7-dcb2-41c2-b277-4e22fd541f97",
   "metadata": {},
   "source": [
    "First, we import `numpy` as `np` for the `unique` function, and we import `random` to be able to generate random numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "95b7fe16-9dbc-4df7-b903-163c3464c588",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd794809-a7a5-4535-8ff9-787b51266b27",
   "metadata": {},
   "source": [
    "Now, let's create a list of 50 random integers between 1 and 10 (inclusive)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a7795f76-0235-499d-a315-296989ed0eae",
   "metadata": {},
   "outputs": [],
   "source": [
    "random_digits = [random.randrange(1, 11) for i in range(50)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af697e88-a3bb-442d-b609-3fad79c1dcc1",
   "metadata": {},
   "source": [
    "We use `numpy`'s `unique` function, which has the option to also return the frequencies associated with each unique number through the `return_counts` function. To activate this function, we set `return_counts` equal to `True`. The output is a tuple containing the two one-dimensional `ndarrays` containing the sorted unique digits and their associated frequencies. This tuple is unpacked into `unique_digits` and `digit_frequencies` respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "bb737b4b-e924-4b64-ab22-6c92d76d6fd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_digits, digit_frequencies = np.unique(random_digits, return_counts=True) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49671e6a-7ab6-4922-8ff7-9e7d304c8903",
   "metadata": {},
   "source": [
    "Now, we display the results in a neat way:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "adaff31b-7e76-44e7-95fe-5e00bd661c90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The digit  1 was chosen  6 times.\n",
      "The digit  2 was chosen  6 times.\n",
      "The digit  3 was chosen  3 times.\n",
      "The digit  4 was chosen  2 times.\n",
      "The digit  5 was chosen  3 times.\n",
      "The digit  6 was chosen  8 times.\n",
      "The digit  7 was chosen  6 times.\n",
      "The digit  8 was chosen  7 times.\n",
      "The digit  9 was chosen  8 times.\n",
      "The digit 10 was chosen  1 times.\n"
     ]
    }
   ],
   "source": [
    "for digit in unique_digits:\n",
    "    print(f'The digit {digit:>2} was chosen {digit_frequencies[digit - 1]:>2} times.')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
